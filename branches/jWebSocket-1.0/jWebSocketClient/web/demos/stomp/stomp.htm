<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Fundamentals Demo (uses jWebSocket Client and Server)
		//	Copyright (c) 2010 Alexander Schulze, Innotrade GmbH, Herzogenrath
		//	****************************************************************************
		//	This program is free software; you can redistribute it and/or modify it
		//	under the terms of the GNU Lesser General Public License as published by the
		//	Free Software Foundation; either version 3 of the License, or (at your
		//	option) any later version.
		//	This program is distributed in the hope that it will be useful, but WITHOUT
		//	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
		//	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
		//	more details.
		//	You should have received a copy of the GNU Lesser General Public License along
		//	with this program; if not, see <http://www.gnu.org/licenses/lgpl.html>.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket STOMP Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">

		<script src="../../lib/stomp/stomp.js" type="text/javascript"></script>
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;
			var eReconnect = null;

			function log(aString) {
				eLog.innerHTML +=
						aString + "<br>";
				if (eLog.scrollHeight > eLog.clientHeight) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lClient = null;
			var mClientId = null;

			function connect() {
				// http://jmesnil.net/stomp-websocket/doc/
				
				var lURL = "ws://localhost:61614/stomp";
				log("Connecting to " + lURL + " ...");
				lClient = Stomp.client(lURL);

				var lConnectCallback = function() {
					log("Connected!");
					
					mClientId = lClient.subscribe("/queue/test", function( aMessage ) {
						log("Received: " + aMessage );
					});
					
				};
				
				var lErrorCallback = function() {
					log("Error on connection!");
				};


				lClient.connect("", "", lConnectCallback, lErrorCallback);
			}

			function send() {
				var lMsg = eMessage.value;
				log("Sending '" + lMsg + "', waiting for answer...");
				lClient.send("/queue/test", { priority: 9 }, "Hello, STOMP" );		
			}

			function disconnect() {
				if (lClient) {
					log("Disconnecting...");
					lClient.disconnect();
					log("Disconnected");
				} else {
					log("Not connected");
				}
			}

			function login() {
				if (lWSC) {
					log("Logging in...");
				}
			}

			function logout() {
				if (lWSC) {
					log("Logging out...");
				}
			}

			function auth() {
				if (lWSC) {
					log("Authenticating...");
				}
			}

			function deauth() {
				if (lWSC) {
					log("Deauthenticating...");
				}
			}

			function getAuth() {
				if (lWSC) {
					log("Getting authorities...");
				}
			}

			function toggleReconnect() {
				if (lWSC) {
					var lReconnect = eReconnect.checked;
					log("Turning auto-reconnect " + (lReconnect ? "on" : "off"));
					lWSC.setReliabilityOptions(lReconnect ? jws.RO_ON : jws.RO_OFF);
				}
			}

			function showReliabilityOptions() {
				if (lWSC) {
					var lOptions = lWSC.getReliabilityOptions();
					var lQueue = lWSC.getOutQueue();
					log("Reliability Options: "
							+ (lQueue ? lQueue.length : "no") + " items in queue"
							+ ", auto-reconnect: " + lOptions.autoReconnect
							+ ", reconnectDelay: " + lOptions.reconnectDelay
							+ ", queueItemLimit: " + lOptions.queueItemLimit
							+ ", queueSizeLimit: " + lOptions.queueSizeLimit
							);

				}
			}

			function thread() {
				log("Starting method as thread...");
				var lRes = jws.runAsThread({
					method: function(aOut) {
						return("This method was called in a WebWorker thread and returned: " + aOut);
					},
					args: ["This was the passed argument"],
					OnMessage: function(aToken) {
						var lData = aToken.data;
						log("Result: " + lData);
					},
					OnError: function(aToken) {
						log("Error: " + aToken.message);
					}
				});
				log(lRes.msg);
			}

			function initPage() {
				eLog = jws.$("sdivLog");
				eReconnect = jws.$("schkReconnect");
				eMessage = jws.$("stxfMsg");
				if (window.WebSocket) {

				} else {
					jws.$("schkReconnect").setAttribute("disabled", "disabled");
					jws.$("sbtnConnect").setAttribute("disabled", "disabled");
					jws.$("sbtnDisconnect").setAttribute("disabled", "disabled");
					jws.$("sbtnClear").setAttribute("disabled", "disabled");
					jws.$("stxfMsg").setAttribute("disabled", "disabled");
					jws.$("sbtnSend").setAttribute("disabled", "disabled");

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert(lMsg);
					log(lMsg);
				}
			}

			function exitPage() {
				disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/fundamentals/fundamentals.htm" );
			}
		</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket STOMP via WebSockets Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>

		<p>This demo shows how to easily set up a minimum JSON communication via WebSockets between a jWebSocket client and a jWebSocket server.
			If you are not sure whether your favorite browser supports WebSockets please refer 
			to our <a target="_top" href="http://jwebsocket.org/jws_for_all.htm">jWebSocket Cross-Browser
				Compatibility</a> page.</p>
		<div id="sdivLog" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"
							   >
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"
							   title="Clears the result and event log above.">
					</td>
					<td class="stdDlg" width="5">Message</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfMsg" type="text" value="Please type your message here!" style="width:100%">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnSend" type="button" value="Send" onclick="send();">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogin" type="button" value="Login" onclick="login();"
							   title="Authenticates you against the jWebSocket Server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogout" type="button" value="Logout" onclick="logout();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnReliability" type="button" value="Conn.Opt." onclick="showReliabilityOptions();"
							   title="Returns the current connection reliability options." >
					</td>
					<td class="stdDlg" width="5" >Auto-Reconnect</td>
					<td class="stdDlg" width="">
						<input class="sbtnDlg" id="schkReconnect" type="checkbox" value="off" onclick="toggleReconnect();"
							   title="Toggle the auto-reconnect status.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogout" type="button" value="Thread" onclick="thread();"
							   title="Runs the echo operation as a thread." >
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnAuth" type="button" value="Auth" onclick="auth();"
							   title="Authenticates you against the jWebSocket Server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDeauth" type="button" value="De-Auth" onclick="deauth();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDeauth" type="button" value="Get Auth." onclick="getAuth();"
							   title="Retreives the authorities for the user.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
