//	---------------------------------------------------------------------------//	jWebSocket Load Balancer Service Sum (Community Edition, CE)//	---------------------------------------------------------------------------//	Copyright 2010-2013 Innotrade GmbH (jWebSocket.org)//	Alexander Schulze, Germany (NRW)////	Licensed under the Apache License, Version 2.0 (the "License");//	you may not use this file except in compliance with the License.//	You may obtain a copy of the License at////	http://www.apache.org/licenses/LICENSE-2.0////	Unless required by applicable law or agreed to in writing, software//	distributed under the License is distributed on an "AS IS" BASIS,//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.//	See the License for the specific language governing permissions and//	limitations under the License.//	---------------------------------------------------------------------------//:package:*:jws//:class:*:jws.LoadBalancerServiceSum//:ancestor:*:-//:d:en:Implementation of the [tt]jws.LoadBalancerServiceSum[/tt] class.//:d:en:This client-side plug-in provides the API to access the features of the _//:d:en:Load Balancer plug-in on the jWebSocket server.jws.LoadBalancerServiceSum = {	//:const:*:NS:String:org.jwebsocket.plugins.samplesum (jws.NS_BASE + ".plugins.samplesum")	//:d:en:Namespace for the [tt]LoadBalancerServiceSum[/tt] class.	// if namespace is changed update server plug-in accordingly!	NS: jws.NS_BASE + ".plugins.samplesum",		processToken: function( aToken ) {		// check if namespace matches		if( aToken.ns == jws.LoadBalancerServiceSum.NS ) {			// here you can handle incoming tokens from the server			// directy in the plug-in if desired.			if(aToken.type == "shutdown"){				jws.LoadBalancerService.shutdown( aToken );			} else if(aToken.type == "sum"){				jws.LoadBalancerServiceSum.sum( aToken );				}		}	},		shutdown : function( aToken ) {		jws.LoadBalancerService.deleteConn(aToken.epId.split('_')[1]);	},		deleteConn : function ( aId ) {		for(var lPos=0; lPos < jws.myConnections.length ; lPos++){			if(jws.myConnections[lPos] != null ){				if(jws.myConnections[lPos].fClientId == aId){					jws.myConnections[lPos].close();					jws.myConnections[lPos] = null;				}			 			}		}	},		sum: function (	aToken) {		var lResponse = this.createResponse( aToken );		var lVal1 = aToken.val1;		var lVal2 = aToken.val2;				if(lVal1!= null && lVal2!= null){			lResponse.result = parseInt(lVal1)+parseInt(lVal2);				} else {			lResponse.code= -1;			lResponse.msg = "The values are null";		}		jws.myConn.sendToken( lResponse );	},		createResponse: function ( aToken ) {		return {			code: 0,			msg: "Ok",			utid: aToken.utid,			ns: jws.NS_BASE + ".plugins.loadbalancer",			type: "response",			sourceId: aToken.sourceId		};	}};// add the JWebSocket Load Balancer Service Sum into the TokenClient classjws.oop.addPlugIn( jws.jWebSocketTokenClient, jws.LoadBalancerServiceSum );			