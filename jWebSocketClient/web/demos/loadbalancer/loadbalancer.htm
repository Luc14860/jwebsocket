<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Load Balancer Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2013 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Load Balancer Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<link rel="stylesheet" type="text/css" href="loadbalancer.css">

		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script src="../../res/js/jwsDemoPlugIn.js" type="text/javascript"></script>
		<script src="../../res/js/jwsLoadBalancerPlugIn.js" type="text/javascript"></script>


		<script type="text/javascript" language="JavaScript">
		
			var myConnections = new Array();
			var mRoutes = new Array();
			var mPassword = null ;
			var testSumNS = 'org.jwebsocket.plugins.samplesum';
			var testMulNS = 'org.jwebsocket.plugins.samplemul';
			
			function addConn( aConn ){
				myConnections[myConnections.length] = aConn;	
			}
		
			function clustersInfo(){
				log(" ");
				log("Getting clusters info...");
				if( lWSC.isConnected() ) {
					lWSC.lbClustersInfo();
				} else {
					log( "Not connected." );
				}
			}
		
			function stickyRoutes() {
				log(" ");
				log("Getting LB sticky routes...");
				if( lWSC.isConnected() ) {
					lWSC.lbStickyRoutes({
						OnResponse: function( aToken ) {
							mRoutes = aToken.data;
							emptySelect("stxfEpId");
							lService = document.getElementById("stxfAlias1");
							lSelect = document.getElementById("stxfEpId"); 
							emptySelect("stxfEpId");
							var lOptionPos = 0;
							for(var lPos=0; lPos < mRoutes.length ;lPos++){
								if(mRoutes[lPos].clusterAlias == lService.value){
									lSelect.options[lOptionPos++] = new Option(mRoutes[lPos].endPointId);
								}
							}
						}
					});
				} else {
					log( "Not connected." );
				}
			}
			
			function registerServiceEndPoint(){
				log(" ");
				log("Running register service endpoint");
				var lClusterAlias = jws.$( "stxfAlias1" ).value;
				var lServiceEndPoint = new jws.jWebSocketJSONClient();
				lServiceEndPoint.open("ws://localhost:8787/jWebSocket/jWebSocket", {
					OnWelcome: function (){
						var lPassword = jws.$( "stxPass" ).value;
						lServiceEndPoint.lbRegisterServiceEndPoint( lPassword, {
								clusterAlias: lClusterAlias
							});
						lServiceEndPoint.addPlugIn({
							processToken: function(aToken){
								if (aToken.ns == testSumNS){
									if ('sumXY' == aToken.type){
										var lResponse = lServiceEndPoint.lbCreateResponse(aToken);
										lResponse.data = parseFloat(aToken.x) + parseFloat(aToken.y);
										
										lServiceEndPoint.sendToken(lResponse);
									} 
								} else if (aToken.ns == testMulNS){
									if ('mulXY' == aToken.type){
										var lResponse = lServiceEndPoint.lbCreateResponse(aToken);
										lResponse.data = parseFloat(aToken.x) * parseFloat(aToken.y);
										
										lServiceEndPoint.sendToken(lResponse);
									} 
								}
							}
						});
					},
					OnMessage: function(aMessage){
						log('Message "' + aMessage.data + '" received on endpoint: ' + lServiceEndPoint.getId());
					}
				});					
				addConn( lServiceEndPoint );
			}	
				
			function deregisterServiceEndPoint() {
				log(" ");
				log("Runing deregister service endpoint");
				if( lWSC.isConnected() ) {
					var lEndPointId = jws.$( "stxfEpId" ).value;
					var lClusterAlias = jws.$( "stxfAlias1" ).value;
					var lPassword = jws.$( "stxPass" ).value;
					lWSC.lbDeregisterServiceEndPoint( lPassword, {
							endPointId: lEndPointId,
							clusterAlias: lClusterAlias
						});
				} else {
					log( "Not connected." );
				}
			}
			
			function shutdownEndPoint(){
				log(" ");
				log("Shutting down endpoint...");
				if( lWSC.isConnected() ) {
					var lEndPointId = jws.$( "stxfEpId" ).value;
					var lClusterAlias = jws.$( "stxfAlias1" ).value;
					var lPassword = jws.$( "stxPass" ).value;
					lWSC.lbShutdownEndPoint( lPassword, {
						clusterAlias: lClusterAlias,
						endPointId: lEndPointId
					});
				} else {
					log( "Not connected." );
				}
			}
			
			function sumXY (){
				log(" ");
				log("Sending sumXY command to the server...");
				if( lWSC.isConnected() ) {
					var lVal1 = jws.$( "stxVal1" ).value;
					var lVal2 = jws.$( "stxVal2" ).value;
					lWSC.sendToken( {
						ns: testSumNS,
						type: 'sumXY',
						x : lVal1,
						y : lVal2
					});
				} else {
					log( "Not connected." );
				}
			}
			
			function mulXY (){
				log(" ");
				log("Sending mulXY command to the server...");
				if( lWSC.isConnected() ) {
					var lVal1 = jws.$( "stxVal1" ).value;
					var lVal2 = jws.$( "stxVal2" ).value;
					lWSC.sendToken( {
						ns: testMulNS,
						type: 'mulXY',
						x : lVal1,
						y : lVal2
					});
				} else {
					log( "Not connected." );
				}
			}
			
			function changeAlgorithm(){
				log(" ");
				log("Sending changeAlgorithm command to the server...");
				if( lWSC.isConnected() ) {
					var lVal =  parseInt(jws.$( "stxCha" ).value);
					lWSC.sendToken( {
						ns: 'org.jwebsocket.plugins.loadbalancer',
						type: 'changeAlgorithm',
						algorithm : lVal
					});
				} else {
					log( "Not connected." );
				}
			}
			
			function loadSelect( ){	
				stickyRoutes();
			}
			
			function emptySelect(objID){  
				while(jws.$(objID).childNodes[0]){  
					jws.$(objID).removeChild(jws.$(objID).childNodes[0]);  
				}  
				lSelect = document.getElementById("stxfEpId"); 
				lSelect.options[0] = new Option("Select endpoint Id to shutdown or deregister");
			}  

		</script>
	</head>

	<body>

		<script type="text/javascript">
			jws.DemoPlugIn.buildDemoPage({
				title: "Load Balancer",
				header: "jWebSocket Load Balancer Demo",
				description: "This demo shows how to use the Load Balancer and your functionalities."
			});
			processInitPage();
		</script>

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >

				<tr class="strDlg">
					<td class="stdDlg" id="stdDlg" width="5">Cluster Alias:
					</td>
					<td class="stdDlg" id="stdSelect">
						<select name="cluster" id="stxfAlias1" selected="service1">
							<option value="service1">service1</option>
							<option value="service2">service2</option>
						</select>
					</td>
					<td class="stdDlg" id="stdDlg" width="5">Password:
					</td>
					<td class="stdDlg" id="stdSelect">
						<input type="password" id="stxPass" value="admin">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnRegisterServiceEndPoint" type="button" value="Register Service EndPoint" onclick="registerServiceEndPoint();"
							   title="Registers a new service endpoint.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnEndPointInfo" type="button" value="Endpoints Info" onclick="clustersInfo();"
							   title="Detailed information about all endpoints of the clusters.">
					</td>
					<td class="stdDlg">
						<input class="sbtnDlg" id="sbtnStickyRoutes" type="button" value="Sticky Routes" onclick="stickyRoutes();"
							   title="Detailed information about all sticky routes.">
					</td>
				</tr> 

			</table>
		</div>

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >
			
				<tr class="strDlg">
					<td class="stdDlg" id="stdDlg" width="30">EndPoint Id:
					</td>
					<td class="stdDlg" width="100">
						<select name="cluster" id="stxfEpId" onclick="loadSelect();">
							<option value="service1">Select endpoint Id to shutdown or deregister</option>
						</select>
					</td>
					<td class="stdDlg">
						<input class="sbtnDlg" id="sbtnShutdownEndpoint" type="button" value="Shutdown EndPoint" onclick="shutdownEndPoint();"
							   title="Shutdown an especific endpoint.">	
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDeregisterServiceEndPoint" type="button" value="Deregister Service EndPoint" onclick="deregisterServiceEndPoint();"
							   title="Deregister an especific endpoint.">
					</td>
				</tr>

			</table>
		</div>

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >

				<tr class="strDlg">
					<td class="stdDlg" id="stdDlgx">X:
					</td>
					<td class="stdDlg">
						<select name="cluster" id="stxVal1">
							<option value="1">1</option>
							<option value="2">2</option>
							<option value="3">3</option>
							<option value="4">4</option>
							<option value="5">5</option>
							<option value="6">6</option>
							<option value="7">7</option>
							<option value="8">8</option>
							<option value="9">9</option>
							<option value="10">10</option>
						</select>
					</td>
					<td class="stdDlg" id="stdDlgx">
					&nbsp;&nbsp;&nbsp;&nbsp;Y:
					</td>
					<td class="stdDlg">
						<select name="cluster" id="stxVal2">
							<option value="1">1</option>
							<option value="2">2</option>
							<option value="3">3</option>
							<option value="4">4</option>
							<option value="5">5</option>
							<option value="6">6</option>
							<option value="7">7</option>
							<option value="8">8</option>
							<option value="9">9</option>
							<option value="10">10</option>
						</select>&nbsp;&nbsp;&nbsp;&nbsp;
					</td>
					<td class="stdDlg">
						<input class="sbtnDlg" id="sbtnSum" type="button" value="Sum X,Y" onclick="sumXY();"
							   title="Click to sum x,y.">
						<input class="sbtnDlg" id="sbtnMul" type="button" value="Mul X,Y" onclick="mulXY();"
							   title="Click to mul x,y.">
					</td>
				</tr>
			</table>
		</div>
		
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >
				<tr class="strDlg">
					<td>
						Select type of algorithm:&nbsp;&nbsp;
					   <select name="cluster" id="stxCha">
							<option value="1">1</option>
							<option value="2">2</option>
							<option value="3">3</option>
						</select>
						&nbsp;&nbsp;
						<input class="sbtnDlg" id="sbtnCha" type="button" value="Change Algorithm" onclick="changeAlgorithm();"
							   title="Click to sum x,y.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
