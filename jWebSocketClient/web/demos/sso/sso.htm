<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket SSO Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2013 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket SSO Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">

		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script src="../../res/js/jwsDemoPlugIn.js" type="text/javascript"></script>
		<script src="../../res/js/jwsSSOPlugIn.js" type="text/javascript"></script>

		<script type="text/javascript" language="JavaScript">
			
			function handleExtProcessMsg( aToken ) {
			}
			
			function authDirect() {
				log( "Calling direct auth..." );
				lWSC.ssoAuthDirect( eUsername.value, ePassword.value, {
					OnSuccess: function( aToken ) {
						log("Success: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					},
					OnTimeout: function( aToken ) {
						log("Timeout: " + JSON.stringify( aToken ) );
					}
				});
			}

			function getUser() {
				log( "Calling get user..." );
				lWSC.ssoGetUser({
					OnSuccess: function( aToken ) {
						log("Success: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					},
					OnTimeout: function( aToken ) {
						log("Timeout: " + JSON.stringify( aToken ) );
					}
				});
			}

			function refreshAccessToken() {
				log( "Refreshing access token..." );
				lWSC.ssoRefreshAccessToken({
					OnSuccess: function( aToken ) {
						log("Success: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					},
					OnTimeout: function( aToken ) {
						log("Timeout: " + JSON.stringify( aToken ) );
					}
				});
			}
			
			function loadOAuthData() {
				log( "Loading OAuth data..." );
				lWSC.ssoLoadOAuthData({
					OnSuccess: function( aToken ) {
						log("Success: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					}
				});
			}
			
			function saveOAuthData() {
				log( "Saving OAuth data..." );
				lWSC.ssoSaveOAuthData({
					OnSuccess: function( aToken ) {
						log("Success: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					}
				});
			}
			
			function getSMSessionCookie() {
				log( "Getting all document cookies (including potential SSO cookies from Web server agent)..." );
				lWSC.ssoGetSMSessionCookie({
					OnSuccess: function( aToken ) {
						log( "Cookie: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					}
				});
			}

			function sendJMSRequest() {
				log( "Sending JMS request..." );
				lWSC.forwardJSON(
					// "hqdvptas134", 
					// "com.ptc.windchill",
					// "createBOM", 
					"server-aschulze-dt", // target
					"org.jwebsocket.svcep.demo", //	aNS, 
					"sso1", //	aType, 
					{
						accessToken: lWSC.ssoGetAccessToken()
					}, //	aArgs, 
					"{}",	//	aJSON payload, 
					{
					OnSuccess: function( aToken ) {
						log( "Success: " + JSON.stringify( aToken ) );
					},
					OnFailure: function( aToken ) {
						log("Failure: " + JSON.stringify( aToken ) );
					}
				});
			}

			function initPage() {
				eArgs = jws.$( "stxfArgs" );
				
				jws.console.setActive( true );
				jws.console.setLevel( jws.console.DEBUG );
				// lWSC.ssoSetHost( "https://hqdvpngpoc01.nvidia.com/as/token.oauth2" );
				// lWSC.ssoSetDefaultTimeout(100);
				lWSC.ssoSetHost( "https://localhost/as/token.oauth2" );
				// lWSC.ssoSetHost( "https://alsius.dev.nvidia.com/as/token.oauth2" );
				lWSC.ssoSetSecret( "2Federate" );
				lWSC.ssoSetAppURL( "https://hqdvalsap01.nvidia.com/sso/index.html" );
				
//				lWSC.setExtProcessCallbacks({
//					OnExtProcessMsg: handleExtProcessMsg
//				});
			}

			function exitPage() {
				// processExitPage();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<script type="text/javascript">
			jws.DemoPlugIn.buildDemoPage({
				title: "External Process",
				header: "Alsius SSO Test",
				description: "This test shows how to access SSO environments via jWebSocket."
			});
			processInitPage();
		</script>

		
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >
				<tr class="strDlg">
					<td colspan="2" width="">
						<input class="sbtnDlg" id="sbtnAuthDirect" type="button" value="Auth directly" onclick="authDirect();"
							   title="Authenticates directly.">
						<input class="sbtnDlg" id="sbtnGetUser" type="button" value="Get User" onclick="getUser();"
							   title="Gets the users from the access token, if exists already.">
						<input class="sbtnDlg" id="sbtnRefreshAccessToken" type="button" value="Refresh" onclick="refreshAccessToken();"
							   title="Refreshes the access token using the refresh token, if exists already.">
						<input class="sbtnDlg" id="sbtnSaveOAuthData" type="button" value="Save Cookie" onclick="saveOAuthData();"
							   title="Saves the relevant OAuth data in a cookie.">
						<input class="sbtnDlg" id="sbtnLoadOAuthData" type="button" value="Load Cookie" onclick="loadOAuthData();"
							   title="Loads the relevant OAuth data from a cookie.">
						<input class="sbtnDlg" id="sbtnGetSMSessionCookie" type="button" value="Cookies" onclick="getSMSessionCookie();"
							   title="Tries to obtain the SiteMinder session cookie.">
						<input class="sbtnDlg" id="sbtnSendRequest" type="button" value="JMS Request" onclick="sendJMSRequest();"
							   title="Send a request using the access token to the JMS demo server.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
