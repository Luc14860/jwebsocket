<?xml version="1.0" encoding="UTF-8"?>
<jWebSocket>
	<installation>prod</installation>
	<protocol>json</protocol>
	<node_id>02</node_id>
	
	<libraries>
		<library>
			<id>SQLLiteDriver</id>
			<url>${JWEBSOCKET_HOME}libs/sqlite-jdbc-3.7.2.jar</url>
			<description>SQLLite JDBC driver to access SQLLite databases from jWebSocket and its plug-ins</description>
		</library>
		<library>
			<id>DerbyDriver</id>
			<url>${JWEBSOCKET_HOME}libs/derby-10.10.1.1.jar</url>
			<description>Derby JDBC driver to access Derby databases from jWebSocket and its plug-ins</description>
		</library>
	</libraries>

	<!-- jWebSocket logging configuration -->
	<logging>
		<log4j>
			<config>${JWEBSOCKET_HOME}conf/log4j.xml</config>
			<autoreload>20000</autoreload>
		</log4j>
	</logging>

	<initializerClass>org.jwebsocket.factory.JWebSocketInitializer</initializerClass>

	<engines>
		
		<!-- JMS Engine Configuration -->
		<engine>
			<name>org.jwebsocket.jms.JMSEngine</name>
			<id>jms0</id>
			<jar>jWebSocketServer-1.0.jar</jar>
			<port>0</port>
			<sslport>0</sslport>
			<keystore>NA</keystore>
			<password>NA</password>
			<maxframesize>1048840</maxframesize>
			<domains>
				<domain>NA</domain>
			</domains>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/JMSEngine/jms.xml</setting>
			</settings>		
		</engine>
	</engines>

	<!-- server types to be instantiated for jWebSocket -->
	<servers>
		<server>
			<name>org.jwebsocket.jms.JMSServer</name>
			<id>ts0</id>
			<jar>jWebSocketTokenServer-1.0.jar</jar>
			<threadPool>
				<corePoolSize>10</corePoolSize>
				<maximumPoolSize>100</maximumPoolSize>
				<keepAliveTime>60</keepAliveTime>
				<blockingQueueSize>1000</blockingQueueSize>
			</threadPool>
			<settings>
				<setting key="supressed_log_fields">password,newPassword,secretPassword,accessPassword</setting>
				<setting key="supressed_log_fields_value">*****</setting>
			</settings>
		</server>
	</servers>

	<!-- jWebSocket global rights -->
	<rights>
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>broadcast</id>
			<description>Broadcast message to all other clients.</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>send</id>
			<description>Send message to a single target client.</description>
		</right>

		<!-- Channel rights -->
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>start</id>
			<description>Allows to start a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>stop</id>
			<description>Allows to stop a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>suspend</id>
			<description>Allows to suspend a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>resume</id>
			<description>Allows to resume a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>subscribe</id>
			<description>Allows to subscribe to and unsubscribe from a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>publish</id>
			<description>Allows to publish to a channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getChannels</id>
			<description>Allows to retrieve the list of available channels</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getSubscribers</id>
			<description>Allows to retrieve the list of scubscribers of a certain channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>getSubscriptions</id>
			<description>Allows to retrieve the list of channels the current client subscribed to</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>createChannel</id>
			<description>Allows to create a new channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>removeChannel</id>
			<description>Allows to remove an existing channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>authorize</id>
			<description>Allows to authorize on an existing channel</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.channels</ns>
			<id>manageSystemChannels</id>
			<description>Allows to manage (create and remove) system channels from clients</description>
		</right>
		<!-- Scripting rights -->
		<right>
			<ns>org.jwebsocket.plugins.scripting</ns>
			<id>reloadApp.*</id>
			<description>Allows to reload script apps in runtime</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.scripting</ns>
			<id>deploy.*</id>
			<description>Allows to deploy script apps in runtime</description>
		</right>
		<!-- configuration of jms plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>sendAndListen.queue.testQueue</id>
			<description>send and listen to queue with name: testQueue</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>listen.topic.testTopic</id>
			<description>listen to topic with name: testTopic</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>send.topic.testTopic</id>
			<description>send messages to topic with name: testTopic
			</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>sendAndListen.topic.stockTopic</id>
			<description>send and listen to topic with name: stockTopic</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createConnection</id>
			<description>createConnection</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createSession</id>
			<description>createSession</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createQueue</id>
			<description>createQueue</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>createConsumer</id>
			<description>createConsumer</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.jms</ns>
			<id>rw.test.queue</id>
			<description>read/write</description>
		</right>

		<!-- ItemStorage rights -->
		<right>
			<ns>org.jwebsocket.plugins.itemstorage</ns>
			<id>write_collection</id>
			<description>Allows to admin item collections (create, remove, clear, changeConfig)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.itemstorage</ns>
			<id>read_collection</id>
			<description>Allows to access item collections (list, getInfo, subscribe, authorize)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.itemstorage</ns>
			<id>write_item</id>
			<description>Allows to admin collection items (save, remove)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.itemstorage</ns>
			<id>read_item</id>
			<description>Allows to access collection items (find, list)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.itemstorage</ns>
			<id>write_definition</id>
			<description>Allows to admin item definitions (register, remove)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.itemstorage</ns>
			<id>read_definition</id>
			<description>Allows to access item definitions (list)</description>
		</right>

		<!-- configuration of filesystem plug-in specific rights -->
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>load</id>
			<description>Allows to load files from file system</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>save</id>
			<description>Allows to save files on the server's alias based file system</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>append</id>
			<description>Allows to append files on the server's alias based file system</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>delete</id>
			<description>Allows to delete files from file system (private area)</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>exists</id>
			<description>Allows to detect if a file exists</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>send</id>
			<description>Allows to send files from one client to another client</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>getFilelist</id>
			<description>Allows to retrieve file lists from file system</description>
		</right>
		<right>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<id>observe</id>
			<description>Allows to monitor changes in files of the file system</description>
		</right>
	</rights>

	<!-- jWebSocket roles -->
	<roles>
		<role>
			<id>Administrator</id>
			<description>Administrators</description>
			<rights>
				<!-- list of rights for "Administrator" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
				
				<right>org.jwebsocket.plugins.scripting.reloadApp.*</right>
				<right>org.jwebsocket.plugins.scripting.deploy.*</right>

				<!-- Channel rights -->
				<right>org.jwebsocket.plugins.channels.subscribe</right>
				<right>org.jwebsocket.plugins.channels.authorize</right>
				<right>org.jwebsocket.plugins.channels.publish</right>
				<right>org.jwebsocket.plugins.channels.getChannels</right>
				<right>org.jwebsocket.plugins.channels.getSubscribers</right>
				<right>org.jwebsocket.plugins.channels.getSubscriptions</right>
				<right>org.jwebsocket.plugins.channels.getChannels</right>
				<right>org.jwebsocket.plugins.channels.createChannel</right>
				<right>org.jwebsocket.plugins.channels.removeChannel</right>
				<right>org.jwebsocket.plugins.channels.start</right>
				<right>org.jwebsocket.plugins.channels.stop</right>

				<!-- JMS rights -->
				<right>org.jwebsocket.plugins.jms.sendAndListen.queue.testQueue</right>
				<right>org.jwebsocket.plugins.jms.listen.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.send.topic.testTopic</right>
				<right>org.jwebsocket.plugins.jms.sendAndListen.topic.stockTopic</right>
				
				<right>org.jwebsocket.plugins.jms.createSession</right>
				<right>org.jwebsocket.plugins.jms.createConnection</right>
				<right>org.jwebsocket.plugins.jms.createQueue</right>
				<right>org.jwebsocket.plugins.jms.createConsumer</right>
				<right>org.jwebsocket.plugins.jms.rw.test.queue</right>

				<!-- itemstorage rights -->
				<right>org.jwebsocket.plugins.itemstorage.write_collection</right>
				<right>org.jwebsocket.plugins.itemstorage.read_collection</right>
				<right>org.jwebsocket.plugins.itemstorage.write_item</right>
				<right>org.jwebsocket.plugins.itemstorage.read_item</right>
				<right>org.jwebsocket.plugins.itemstorage.write_definition</right>
				<right>org.jwebsocket.plugins.itemstorage.read_definition</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.save</right>
				<right>org.jwebsocket.plugins.filesystem.append</right>
				<right>org.jwebsocket.plugins.filesystem.delete</right>
				<right>org.jwebsocket.plugins.filesystem.exists</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>
				<right>org.jwebsocket.plugins.filesystem.observe</right>
			</rights>
		</role>
		<role>
			<id>User</id>
			<description>Registered and authenticated users.</description>
			<rights>
				<!-- list of rights for "User" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>
			</rights>
		</role>
		<role>
			<id>Guest</id>
			<description>Anonymous users (not registered)</description>
			<rights>
				<!-- list of rights for "Guest" role (ns + . + id) -->
				<right>org.jwebsocket.plugins.system.broadcast</right>
				<right>org.jwebsocket.plugins.system.send</right>

				<right>org.jwebsocket.plugins.scripting.reloadApp.*</right>
				<right>org.jwebsocket.plugins.scripting.deploy.*</right>

				<!-- filesystem rights -->
				<right>org.jwebsocket.plugins.filesystem.load</right>
				<right>org.jwebsocket.plugins.filesystem.save</right>
				<right>org.jwebsocket.plugins.filesystem.append</right>
				<right>org.jwebsocket.plugins.filesystem.delete</right>
				<right>org.jwebsocket.plugins.filesystem.exists</right>
				<right>org.jwebsocket.plugins.filesystem.send</right>
				<right>org.jwebsocket.plugins.filesystem.getFilelist</right>
				<right>org.jwebsocket.plugins.filesystem.observe</right>
			</rights>
		</role>
	</roles>

	<users>
		<user>
			<uuid>000-000-001-2011-07-14-11-32-40-223</uuid>
			<loginname>guest</loginname>
			<firstname>jWebSocket Guest User</firstname>
			<lastname>(Guest Role)</lastname>
			<password>guest</password>
			<description>jWebSocket Guest User</description>
			<status>1</status>
			<roles>
				<role>Guest</role>
			</roles>
		</user>
		<user>
			<uuid>000-000-002-2011-07-14-11-33-20-493</uuid>
			<loginname>user</loginname>
			<firstname>jWebSocket Authenticated User</firstname>
			<lastname>(User Role)</lastname>
			<password>user</password>
			<description>jWebSocket Standard User</description>
			<status>1</status>
			<roles>
				<role>Guest</role>
				<role>User</role>
			</roles>
		</user>
		<user>
			<uuid>000-000-003-2011-07-14-11-34-17-189</uuid>
			<loginname>root</loginname>
			<firstname>jWebSocket Root User</firstname>
			<lastname>(Administrator Role)</lastname>
			<password>root</password>
			<description>jWebSocket Root User</description>
			<status>1</status>
			<roles>
				<role>Guest</role>
				<role>User</role>
				<role>Administrator</role>
			</roles>
		</user>
		<user>
			<uuid>000-000-004-2011-07-14-11-35-54-871</uuid>
			<loginname>anonymous</loginname>
			<firstname>jWebSocket Anonymous User</firstname>
			<lastname>(Roles to be specified!)</lastname>
			<password></password>
			<description>jWebSocket Anonymous User (Specify if anonymous logins should be supported at all in System Plug-in)</description>
			<status>1</status>
			<roles>
				<role>Guest</role>
				<role>User</role>
				<role>Administrator</role>
			</roles>
		</user>
	</users>
	<plugins>
		<!-- the system plug-in, do not remove, mandatory for basic WebsScket communication operations -->
		<plugin>
			<name>org.jwebsocket.plugins.system.SystemPlugIn</name>
			<ns>org.jwebsocket.plugins.system</ns>
			<id>jws.system</id>
			<jar>jWebSocketServer-1.0.jar</jar>
			<!-- plug-in specific settings -->
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/SystemPlugIn/system.xml</setting>
				<setting key="broadcastOpenEvent">true</setting>
				<setting key="broadcastCloseEvent">true</setting>
				<setting key="broadcastLoginEvent">true</setting>
				<setting key="broadcastLogoutEvent">true</setting>
				<setting key="allowAnonymousLogin">true</setting>
				<setting key="anonymousLoginName">anonymous</setting>
				<setting key="loginNameCaseInsensitive">true</setting>
				<setting key="allowAutoAnonymous">true</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
		
        <!-- filesystem plug-in to access server files via WebSockets -->
		<plugin>
			<name>org.jwebsocket.enterprise.plugins.filesystem.FileSystemPlugIn</name>
			<id>jws.filesystem</id>
			<ns>org.jwebsocket.plugins.filesystem</ns>
			<!-- to use the enterprise edition of jWebSocketFileSystemPlugIn add the following line -->
			<jars>
				<jar>${JWEBSOCKET_HOME}libs/jWebSocketFileSystemPlugIn-1.0.jar</jar>
				<jar>${JWEBSOCKET_EE_HOME}libs/jWebSocketFileSystemPlugInEE-1.0.jar</jar>
			</jars>
			<!-- plug-in specific settings -->
			<settings>
				<setting key="spring_config">${JWEBSOCKET_EE_HOME}conf/FileSystemPlugIn/filesystem.xml</setting>
				<!-- Authorization method 
				     - spring: Uses the user Spring authentication to check for granted authorities 
					 - static: Uses the user static (jWebSocket.xml users definition) authentication
					   to check for granted authorities (rights)
					   
					 Default value is "static"
					   
					 Required user authorities for the FileSystem plug-in:
					 - org.jwebsocket.plugins.filesystem.load
					 - org.jwebsocket.plugins.filesystem.save
					 - org.jwebsocket.plugins.filesystem.append
					 - org.jwebsocket.plugins.filesystem.delete
					 - org.jwebsocket.plugins.filesystem.exists
					 - org.jwebsocket.plugins.filesystem.send
					 - org.jwebsocket.plugins.filesystem.getFilelist
					 - org.jwebsocket.plugins.filesystem.observe
				-->
				<!-- <setting key="authentication_method">spring</setting> -->
				<setting key="alias:privateDir">${JWEBSOCKET_HOME}filesystem/private/{username}/</setting>
				<setting key="alias:publicDir">${JWEBSOCKET_HOME}filesystem/public/</setting>
				<setting key="alias:webRoot">http://localhost/public/</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
        
		<!-- Scripting plug-in, e.g. to call JavaScript on the server side -->
		<!-- will be released in jWebSocket 1.1 -->
		<plugin>
			<name>org.jwebsocket.plugins.scripting.ScriptingPlugIn</name>
			<id>jWebSocketScriptingPlugIn</id>
			<jar>jWebSocketScriptingPlugIn-1.0.jar</jar>
			<settings>
				<setting key="spring_config">${JWEBSOCKET_HOME}conf/ScriptingPlugIn/scripting.xml</setting>
			</settings>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</plugin>
	</plugins>

	<filters>
		<filter>
			<name>org.jwebsocket.filters.system.SystemFilter</name>
			<id>jws.sampleFilter</id>
			<ns>org.jwebsocket.filters.system</ns>
			<jar>jWebSocketServer-1.0.jar</jar>
			<server-assignments>
				<server-assignment>ts0</server-assignment>
			</server-assignments>
		</filter>
	</filters>

</jWebSocket>
